# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
name: Build Python library
on: [push]
jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.9"
      - name: Load cached Poetry installation
        uses: actions/cache@v2
        with:
          path: ~/.local
          key: poetry-0
      - name: Install poetry
        uses: snok/install-poetry@v1.2.0
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      - name: Install library
        run: |
          poetry install --no-interaction
          python -m pip install pytest-github-actions-annotate-failures
      - name: Test with pytest
        run: |
          poetry run pytest -vvv
  qa:
    name: Quality checks
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.9"
      - name: Load cached Poetry installation
        uses: actions/cache@v2
        with:
          path: ~/.local
          key: poetry-0
      - name: Install poetry
        uses: snok/install-poetry@v1.2.0
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
      - name: Typecheck
        run: poetry run pyright
      - uses: psf/black@stable
      - name: Sort imports
        run: poetry run isort .
      - name: Commit and push changes
        uses: github-actions-x/commit@v2.5
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "style: Reformat ${{ github.sha }}"
          name: github-actions
          email: action@github.com
      - name: Get new SHA
        id: sha
        run: |
          new_sha=$(git rev-parse HEAD)
          echo "::set-output name=SHA::$new_sha"
  release:
    name: Semantic Release
    runs-on: ubuntu-latest
    concurrency: push
    needs: [test, qa]
    if: github.repository_owner == 'darvid' && github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: ${{ needs.qa.outputs.new_sha }}
      - name: Fetch main
        run: git fetch --prune origin +refs/heads/main:refs/remotes/origin/main
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.9"
      - name: Load cached Poetry installation
        uses: actions/cache@v2
        with:
          path: ~/.local
          key: poetry-0
      - name: Install poetry
        uses: snok/install-poetry@v1.2.0
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
      - name: Python Semantic Release
        uses: relekang/python-semantic-release@v7.19.2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          pypi_token: ${{ secrets.PYPI_TOKEN }}
